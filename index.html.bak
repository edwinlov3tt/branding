<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Branding UI - Brand Intelligence Platform</title>
    <link rel="icon" href="favicon.svg" type="image/svg+xml">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #0f0f0f;
            --bg-secondary: #1a1a1a;
            --bg-tertiary: #2a2a2a;
            --text-primary: #ffffff;
            --text-secondary: #a3a3a3;
            --text-muted: #737373;
            --border: #404040;
            --brand-red: #dc2626;
            --brand-red-hover: #b91c1c;
            --success: #22c55e;
            --warning: #f59e0b;
            --text-warning: #f59e0b;
            --radius: 12px;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.5;
        }

        .app-container {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        .sidebar {
            width: 240px;
            background: var(--bg-secondary);
            border-right: 1px solid var(--border);
            padding: 24px 16px;
            overflow-y: auto;
        }

        .logo {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 32px;
            color: var(--text-primary);
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            margin-bottom: 8px;
            border-radius: var(--radius);
            cursor: pointer;
            transition: all 0.2s ease;
            color: var(--text-secondary);
        }

        .nav-item:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .nav-item.active {
            background: var(--brand-red);
            color: var(--text-primary);
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            margin-right: 12px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .header {
            padding: 16px 32px;
            border-bottom: 1px solid var(--border);
            background: var(--bg-secondary);
        }

        .header h1 {
            font-size: 24px;
            font-weight: 600;
        }

        .content {
            flex: 1;
            padding: 32px;
            overflow-y: auto;
        }

        .page {
            display: none;
        }

        .page.active {
            display: block;
        }

        .card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 24px;
            box-shadow: var(--shadow);
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
        }

        .button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 24px;
            border: none;
            border-radius: var(--radius);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .button-primary {
            background: var(--brand-red);
            color: white;
        }

        .button-primary:hover {
            background: var(--brand-red-hover);
        }

        .button-secondary {
            background: var(--bg-tertiary);
            color: var(--text-primary);
            border: 1px solid var(--border);
        }

        .button-secondary:hover {
            background: var(--bg-primary);
        }

        .input {
            width: 100%;
            padding: 12px 16px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            color: var(--text-primary);
            font-size: 14px;
        }

        .input:focus {
            outline: none;
            border-color: var(--brand-red);
        }

        .grid {
            display: grid;
            gap: 24px;
        }

        .grid-2 {
            grid-template-columns: repeat(2, 1fr);
        }

        .grid-3 {
            grid-template-columns: repeat(3, 1fr);
        }

        .grid-4 {
            grid-template-columns: repeat(4, 1fr);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--bg-primary);
            border-radius: 4px;
            overflow: hidden;
            margin: 16px 0;
        }

        .progress-fill {
            height: 100%;
            background: var(--brand-red);
            transition: width 0.3s ease;
        }

        .chip {
            display: inline-flex;
            align-items: center;
            padding: 6px 12px;
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: 20px;
            font-size: 12px;
            margin: 4px;
        }

        .color-swatch {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            margin-right: 8px;
            border: 2px solid var(--border);
        }

        .persona-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 20px;
            margin-bottom: 16px;
        }

        .persona-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .persona-role {
            color: var(--text-secondary);
            margin-bottom: 16px;
        }

        .competitor-table {
            width: 100%;
            border-collapse: collapse;
            background: var(--bg-secondary);
            border-radius: var(--radius);
            overflow: hidden;
        }

        .competitor-table th,
        .competitor-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid var(--border);
        }

        .competitor-table th {
            background: var(--bg-tertiary);
            font-weight: 600;
        }

        .competitor-table tbody tr:nth-child(even) {
            background: var(--bg-primary);
        }

        .template-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .template-card:hover {
            border-color: var(--brand-red);
            transform: translateY(-2px);
        }

        .template-preview {
            width: 100%;
            height: 120px;
            background: var(--bg-primary);
            border-radius: var(--radius);
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
        }

        .generation-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 16px;
            position: relative;
        }

        .generation-preview {
            width: 100%;
            height: 160px;
            background: var(--bg-primary);
            border-radius: var(--radius);
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
        }

        .generation-actions {
            display: flex;
            gap: 8px;
            margin-top: 12px;
        }

        .model-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 20px;
            text-align: center;
        }

        .model-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: var(--bg-primary);
            margin: 0 auto 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
        }

        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .status-success {
            background: rgba(34, 197, 94, 0.2);
            color: var(--success);
        }

        .status-warning {
            background: rgba(245, 158, 11, 0.2);
            color: var(--warning);
        }

        .status-error {
            background: rgba(220, 38, 38, 0.2);
            color: var(--brand-red);
        }

        .filters {
            display: flex;
            gap: 16px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .filter-label {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .select {
            padding: 8px 12px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            color: var(--text-primary);
            min-width: 120px;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 32px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 16px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 4px;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .textarea {
            width: 100%;
            min-height: 80px;
            padding: 12px 16px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            color: var(--text-primary);
            font-size: 14px;
            resize: vertical;
        }

        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid var(--border);
            border-top: 2px solid var(--brand-red);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .alert {
            padding: 12px 16px;
            border-radius: var(--radius);
            margin-bottom: 16px;
        }

        .alert-success {
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid rgba(34, 197, 94, 0.3);
            color: var(--success);
        }

        .alert-error {
            background: rgba(220, 38, 38, 0.1);
            border: 1px solid rgba(220, 38, 38, 0.3);
            color: var(--brand-red);
        }

        .empty-state {
            text-align: center;
            padding: 64px 32px;
            color: var(--text-muted);
        }

        .empty-state h3 {
            margin-bottom: 8px;
            color: var(--text-secondary);
        }

        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
                order: 2;
            }

            .main-content {
                order: 1;
            }

            .grid-2, .grid-3, .grid-4 {
                grid-template-columns: 1fr;
            }

            .content {
                padding: 16px;
            }

            .filters {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <nav class="sidebar">
            <div class="logo">Branding UI</div>
            <div class="nav-item active" data-page="brand">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                Brand Profile
            </div>
            <div class="nav-item" data-page="personas">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
                Personas
            </div>
            <div class="nav-item" data-page="competitors">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                Competitors
            </div>
            <div class="nav-item" data-page="inspiration">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                </svg>
                Inspiration
            </div>
            <div class="nav-item" data-page="generations">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                Generations
            </div>
            <div class="nav-item" data-page="models">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                </svg>
                AI Models
            </div>
            <div class="nav-item" data-page="settings">
                <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                    <path d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                </svg>
                Settings
            </div>
        </nav>

        <main class="main-content">
            <header class="header">
                <h1 id="page-title">Brand Profile</h1>
            </header>

            <div class="content">
                <!-- Brand Profile Page -->
                <div id="brand" class="page active">
                    <div class="card">
                        <div class="card-title">Create Brand Profile</div>
                        <form id="brand-form">
                            <div class="form-group">
                                <label class="form-label">Website URL</label>
                                <input type="url" class="input" id="brand-url" placeholder="https://example.com" required>
                            </div>
                            <button type="submit" class="button button-primary">
                                <span id="extract-text">Extract Brand Assets</span>
                                <div id="extract-loading" class="loading" style="display: none; margin-left: 8px;"></div>
                            </button>
                        </form>

                        <div id="extraction-progress" style="display: none;">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: 0%"></div>
                            </div>
                            <p id="progress-text">Analyzing website...</p>
                        </div>

                        <div id="brand-results" style="display: none; margin-top: 24px;">
                            <h3>Brand Assets</h3>
                            <div class="grid grid-3" style="margin-top: 16px;">
                                <div class="card">
                                    <div class="card-title">Logos</div>
                                    <div id="logos-container"></div>
                                </div>
                                <div class="card">
                                    <div class="card-title">Colors</div>
                                    <div id="colors-container"></div>
                                </div>
                                <div class="card">
                                    <div class="card-title">Fonts</div>
                                    <div id="fonts-container"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Personas Page -->
                <div id="personas" class="page">
                    <div class="card">
                        <div class="card-title">Generate Customer Personas</div>
                        <p style="margin-bottom: 24px; color: var(--text-secondary);">Generate 5 detailed customer personas based on your brand profile and market research data.</p>
                        
                        <div class="form-group">
                            <label class="form-label">Pre Research Link (Optional)</label>
                            <div style="display: flex; gap: 8px; margin-bottom: 16px;">
                                <input type="text" class="input" id="research-domain" placeholder="Enter domain for market research data (e.g., californiaclosets.com)" style="flex: 1;">
                                <button id="fetch-research" class="button button-secondary">
                                    <span id="research-text">Fetch Research</span>
                                    <div id="research-loading" class="loading" style="display: none; margin-left: 8px;"></div>
                                </button>
                            </div>
                            <div id="research-status" style="display: none; margin-bottom: 16px;"></div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Company Profile</label>
                            <div class="grid grid-2" style="gap: 16px; margin-bottom: 16px;">
                                <div>
                                    <input type="text" class="input" id="company-name" placeholder="Company name" style="margin-bottom: 8px;">
                                    <input type="text" class="input" id="product-category" placeholder="Product/service category">
                                </div>
                                <div>
                                    <input type="text" class="input" id="geographic-markets" placeholder="Primary markets (e.g., US, EU)" style="margin-bottom: 8px;">
                                    <input type="text" class="input" id="customer-size" placeholder="Typical customer size (e.g., 1-10 employees)">
                                </div>
                            </div>
                            <textarea class="textarea" id="core-features" placeholder="Core features & benefits (3-6 bullet points)..." style="height: 80px; margin-bottom: 8px;"></textarea>
                            <div class="grid grid-2" style="gap: 16px; margin-bottom: 16px;">
                                <input type="text" class="input" id="pricing-model" placeholder="Pricing model & typical spend">
                                <input type="text" class="input" id="key-competitors" placeholder="Key competitors (2-4)">
                            </div>
                            <div class="grid grid-2" style="gap: 16px; margin-bottom: 16px;">
                                <input type="text" class="input" id="brand-voice" placeholder="Brand voice & positioning">
                                <input type="text" class="input" id="must-include" placeholder="Must-include demographics/verticals">
                            </div>
                            <textarea class="textarea" id="business-goals" placeholder="Top 3 business goals for next 12 months..." style="height: 60px; margin-bottom: 8px;"></textarea>
                            <input type="text" class="input" id="disallowed" placeholder="Disallowed industries/audiences (optional)">
                        </div>
                        
                        <div style="display: flex; gap: 12px; margin-bottom: 16px;">
                            <button id="generate-personas" class="button button-primary">
                                <span>Generate 5 Personas with AI</span>
                                <div id="personas-loading" class="loading" style="display: none; margin-left: 8px;"></div>
                            </button>
                            <button id="use-template" class="button button-secondary">Use Template</button>
                        </div>

                        <div id="personas-results" style="margin-top: 24px;"></div>
                    </div>
                </div>

                <!-- Competitors Page -->
                <div id="competitors" class="page">
                    <div class="card">
                        <div class="card-title">Competitor Analysis</div>
                        
                        <div class="form-group">
                            <label class="form-label">Add Competitors</label>
                            <div style="display: flex; gap: 8px;">
                                <input type="text" class="input" id="competitor-name" placeholder="Company name or website" style="flex: 1;">
                                <button id="add-competitor" class="button button-secondary">Add</button>
                            </div>
                        </div>

                        <div class="filters">
                            <div class="filter-group">
                                <div class="filter-label">Status</div>
                                <select class="select" id="status-filter">
                                    <option value="all">All</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <div class="filter-label">Platform</div>
                                <select class="select" id="platform-filter">
                                    <option value="all">All Platforms</option>
                                    <option value="meta">Meta</option>
                                    <option value="tiktok">TikTok</option>
                                    <option value="google">Google</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <div class="filter-label">Date Range</div>
                                <select class="select" id="date-filter">
                                    <option value="30">Last 30 days</option>
                                    <option value="90">Last 90 days</option>
                                    <option value="180">Last 6 months</option>
                                </select>
                            </div>
                        </div>

                        <table class="competitor-table">
                            <thead>
                                <tr>
                                    <th>Company</th>
                                    <th>Platform</th>
                                    <th>Ad Count</th>
                                    <th>Last Updated</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="competitors-table-body">
                                <tr>
                                    <td colspan="5" class="empty-state">
                                        <h3>No competitors added</h3>
                                        <p>Add competitors to start analyzing their advertising strategies.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Inspiration Page -->
                <div id="inspiration" class="page">
                    <div class="card">
                        <div class="card-title">Proven Templates</div>
                        <p style="margin-bottom: 24px; color: var(--text-secondary);">Browse our curated library of high-performing creative templates.</p>
                        
                        <div class="filters">
                            <div class="filter-group">
                                <div class="filter-label">Industry</div>
                                <select class="select" id="industry-filter">
                                    <option value="all">All Industries</option>
                                    <option value="ecommerce">E-commerce</option>
                                    <option value="saas">SaaS</option>
                                    <option value="finance">Finance</option>
                                    <option value="health">Health & Wellness</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <div class="filter-label">Type</div>
                                <select class="select" id="type-filter">
                                    <option value="all">All Types</option>
                                    <option value="image">Image Ad</option>
                                    <option value="video">Video Ad</option>
                                    <option value="banner">Banner Ad</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <div class="filter-label">Objective</div>
                                <select class="select" id="objective-filter">
                                    <option value="all">All Objectives</option>
                                    <option value="awareness">Awareness</option>
                                    <option value="conversion">Conversion</option>
                                    <option value="engagement">Engagement</option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-3" id="templates-grid">
                            <!-- Templates will be populated here -->
                        </div>
                    </div>
                </div>

                <!-- Generations Page -->
                <div id="generations" class="page">
                    <div class="card">
                        <div class="card-title">Generated Creatives</div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
                            <p style="color: var(--text-secondary);">Your generated creative assets and variations.</p>
                            <button id="new-generation" class="button button-primary">New Generation</button>
                        </div>

                        <div class="filters">
                            <div class="filter-group">
                                <div class="filter-label">Type</div>
                                <select class="select">
                                    <option value="all">All Types</option>
                                    <option value="image">Image</option>
                                    <option value="video">Video</option>
                                    <option value="banner">Banner</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <div class="filter-label">Status</div>
                                <select class="select">
                                    <option value="all">All</option>
                                    <option value="completed">Completed</option>
                                    <option value="processing">Processing</option>
                                    <option value="failed">Failed</option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-4" id="generations-grid">
                            <!-- Generations will be populated here -->
                        </div>
                    </div>
                </div>

                <!-- AI Models Page -->
                <div id="models" class="page">
                    <div class="card">
                        <div class="card-title">AI Models & Actors</div>
                        <p style="margin-bottom: 24px; color: var(--text-secondary);">Create and manage AI-generated actors for your video content.</p>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
                            <div></div>
                            <button id="create-model" class="button button-primary">Create New Model</button>
                        </div>

                        <div class="grid grid-3" id="models-grid">
                            <div class="empty-state">
                                <h3>No AI models created</h3>
                                <p>Create your first AI actor to generate video content with digital humans.</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Settings Page -->
                <div id="settings" class="page">
                    <div class="grid" style="gap: 24px;">
                        <div class="card">
                            <div class="card-title">API Configuration</div>
                            <form>
                                <div class="form-group">
                                    <label class="form-label">Username</label>
                                    <input type="text" class="input" id="api-username" placeholder="API Username" autocomplete="username" style="display: none;">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Jogg AI API Key</label>
                                    <input type="password" class="input" id="jogg-api-key" placeholder="Enter your Jogg AI API key" autocomplete="current-password">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Meta Ad Library Token</label>
                                    <input type="password" class="input" id="meta-token" placeholder="Enter your Meta Ad Library token" autocomplete="new-password">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">TikTok API Token</label>
                                    <input type="password" class="input" id="tiktok-token" placeholder="Enter your TikTok API token" autocomplete="new-password">
                                </div>
                                <button class="button button-primary" type="button">Save API Keys</button>
                            </form>
                        </div>

                        <div class="card">
                            <div class="card-title">Generation Settings</div>
                            <div class="form-group">
                                <label class="form-label">Default AI Model</label>
                                <select class="select">
                                    <option>GPT-4</option>
                                    <option>Claude 3.5 Sonnet</option>
                                    <option>Gemini Pro</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Image Quality</label>
                                <select class="select">
                                    <option>High (1024x1024)</option>
                                    <option>Medium (512x512)</option>
                                    <option>Low (256x256)</option>
                                </select>
                            </div>
                            <button class="button button-primary">Save Settings</button>
                        </div>

                        <div class="card">
                            <div class="card-title">Data Management</div>
                            <div style="display: flex; gap: 16px; margin-bottom: 16px;">
                                <button class="button button-secondary">Export Data</button>
                                <button class="button button-secondary">Import Templates</button>
                            </div>
                            <div class="alert alert-error">
                                <strong>Danger Zone:</strong> This action cannot be undone.
                            </div>
                            <button class="button" style="background: var(--brand-red); color: white;">Clear All Data</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modals -->
    <div id="generation-modal" class="modal">
        <div class="modal-content">
            <div class="modal-title">Create New Generation</div>
            <form id="generation-form">
                <div class="form-group">
                    <label class="form-label">Type</label>
                    <select class="select" id="generation-type" required>
                        <option value="">Select type</option>
                        <option value="image">Image Ad</option>
                        <option value="video">Video Ad</option>
                        <option value="banner">Banner Ad</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Template (Optional)</label>
                    <select class="select" id="generation-template">
                        <option value="">Select template</option>
                        <option value="1">E-commerce Hero</option>
                        <option value="2">SaaS Feature</option>
                        <option value="3">Social Proof</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Prompt</label>
                    <textarea class="textarea" id="generation-prompt" placeholder="Describe the creative you want to generate..." required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">AI Model</label>
                    <select class="select" id="generation-model">
                        <option value="dall-e-3">DALL-E 3</option>
                        <option value="midjourney">Midjourney</option>
                        <option value="stable-diffusion">Stable Diffusion</option>
                    </select>
                </div>
                <div style="display: flex; gap: 16px; justify-content: flex-end; margin-top: 24px;">
                    <button type="button" class="button button-secondary" onclick="closeModal('generation-modal')">Cancel</button>
                    <button type="submit" class="button button-primary">Generate</button>
                </div>
            </form>
        </div>
    </div>

    <div id="model-modal" class="modal">
        <div class="modal-content">
            <div class="modal-title">Create AI Model</div>
            <form id="model-form">
                <div class="form-group">
                    <label class="form-label">Model Type</label>
                    <select class="select" id="model-type" required>
                        <option value="">Select type</option>
                        <option value="avatar">Digital Avatar</option>
                        <option value="spokesperson">Spokesperson</option>
                        <option value="character">Brand Character</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea class="textarea" id="model-description" placeholder="Describe the appearance, style, and personality of your AI model..." required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Voice Style (Optional)</label>
                    <select class="select" id="model-voice">
                        <option value="">Select voice</option>
                        <option value="professional">Professional</option>
                        <option value="friendly">Friendly</option>
                        <option value="energetic">Energetic</option>
                        <option value="calm">Calm</option>
                    </select>
                </div>
                <div style="display: flex; gap: 16px; justify-content: flex-end; margin-top: 24px;">
                    <button type="button" class="button button-secondary" onclick="closeModal('model-modal')">Cancel</button>
                    <button type="submit" class="button button-primary">Create Model</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Navigation
        const navItems = document.querySelectorAll('.nav-item');
        const pages = document.querySelectorAll('.page');
        const pageTitle = document.getElementById('page-title');

        const pageTitles = {
            brand: 'Brand Profile',
            personas: 'Customer Personas',
            competitors: 'Competitor Analysis',
            inspiration: 'Inspiration Library',
            generations: 'Generated Creatives',
            models: 'AI Models & Actors',
            settings: 'Settings'
        };

        navItems.forEach(item => {
            item.addEventListener('click', () => {
                const targetPage = item.dataset.page;
                
                // Update active nav item
                navItems.forEach(nav => nav.classList.remove('active'));
                item.classList.add('active');
                
                // Update active page
                pages.forEach(page => page.classList.remove('active'));
                document.getElementById(targetPage).classList.add('active');
                
                // Update page title
                pageTitle.textContent = pageTitles[targetPage];
            });
        });

        // Sample data
        const sampleTemplates = [
            { id: 1, title: 'E-commerce Hero', industry: 'ecommerce', type: 'image', objective: 'conversion' },
            { id: 2, title: 'SaaS Feature Showcase', industry: 'saas', type: 'video', objective: 'awareness' },
            { id: 3, title: 'Social Proof Banner', industry: 'all', type: 'banner', objective: 'conversion' },
            { id: 4, title: 'Health & Wellness Story', industry: 'health', type: 'video', objective: 'engagement' },
            { id: 5, title: 'Finance Trust Builder', industry: 'finance', type: 'image', objective: 'awareness' },
            { id: 6, title: 'App Download CTA', industry: 'all', type: 'banner', objective: 'conversion' }
        ];

        const samplePersonas = [
            {
                name: 'Sarah Chen',
                role: 'Marketing Manager',
                pains: ['Limited budget for creative production', 'Difficulty measuring ad performance'],
                behaviors: ['Active on LinkedIn and industry forums', 'Researches tools thoroughly before purchase'],
                motivations: ['Career advancement', 'Team efficiency improvement'],
                budgetRange: '$5,000 - $15,000/month',
                objections: ['Concerned about learning curve', 'Needs approval for new tools'],
                benefits: ['Streamlined creative workflow', 'Better ROI tracking'],
                pitch: 'Empower your marketing team with AI-driven creative generation that scales.',
                cta: 'Start Your Free Trial'
            },
            {
                name: 'Mike Rodriguez',
                role: 'Small Business Owner',
                pains: ['No dedicated marketing team', 'High agency costs'],
                behaviors: ['DIY approach to marketing', 'Price-sensitive decisions'],
                motivations: ['Business growth', 'Cost reduction'],
                budgetRange: '$500 - $2,000/month',
                objections: ['Skeptical of AI quality', 'Prefers personal touch'],
                benefits: ['Professional creatives on a budget', 'Time savings'],
                pitch: 'Get agency-quality creatives without the agency price tag.',
                cta: 'See Pricing Plans'
            },
            {
                name: 'Jessica Park',
                role: 'E-commerce Director',
                pains: ['Seasonal demand fluctuations', 'Managing multiple product lines'],
                behaviors: ['Data-driven decisions', 'Tests multiple ad variations'],
                motivations: ['Revenue optimization', 'Market expansion'],
                budgetRange: '$10,000 - $50,000/month',
                objections: ['Integration with existing tools', 'Brand consistency concerns'],
                benefits: ['Scalable creative production', 'A/B testing capabilities'],
                pitch: 'Scale your creative testing with AI-generated variations that convert.',
                cta: 'Request Demo'
            },
            {
                name: 'David Kim',
                role: 'Agency Creative Director',
                pains: ['Client demanding faster turnaround', 'Rising production costs'],
                behaviors: ['Stays updated on design trends', 'Values creative control'],
                motivations: ['Client satisfaction', 'Creative innovation'],
                budgetRange: '$20,000 - $100,000/month',
                objections: ['AI replacing human creativity', 'Client acceptance'],
                benefits: ['Rapid ideation and iteration', 'Cost-effective scaling'],
                pitch: 'Augment your creative team with AI that enhances, not replaces, human creativity.',
                cta: 'Schedule Consultation'
            },
            {
                name: 'Lisa Thompson',
                role: 'Startup Co-founder',
                pains: ['Bootstrap budget constraints', 'Wearing multiple hats'],
                behaviors: ['Seeks growth hacking tactics', 'Active in startup communities'],
                motivations: ['Product-market fit', 'Fundraising success'],
                budgetRange: '$200 - $1,000/month',
                objections: ['Cash flow concerns', 'Feature completeness'],
                benefits: ['Professional brand presence', 'Marketing automation'],
                pitch: 'Build a professional brand presence from day one with AI-powered creative tools.',
                cta: 'Start Free'
            }
        ];

        // Brand extraction with real API
        document.getElementById('brand-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const url = document.getElementById('brand-url').value;
            const extractText = document.getElementById('extract-text');
            const extractLoading = document.getElementById('extract-loading');
            const progressContainer = document.getElementById('extraction-progress');
            const progressFill = progressContainer.querySelector('.progress-fill');
            const progressText = document.getElementById('progress-text');
            const resultsContainer = document.getElementById('brand-results');
            
            // Show loading state
            extractText.style.display = 'none';
            extractLoading.style.display = 'inline-block';
            progressContainer.style.display = 'block';
            resultsContainer.style.display = 'none';
            
            try {
                // Real API call to analyze website
                progressText.textContent = 'Analyzing website...';
                progressFill.style.width = '20%';
                
                // Try the API call with better error handling
                let response;
                try {
                    response = await fetch('/api/analyze-website', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify({
                            url: url,
                            includeTracking: false,
                            trackingMode: "static"
                        })
                    });
                } catch (corsError) {
                    // CORS error - show helpful message and use fallback
                    console.log('CORS error detected, using fallback data');
                    progressText.textContent = 'API unavailable due to CORS. Using demo data...';
                    progressText.style.color = 'var(--warning)';
                    
                    // Simulate progress
                    for (let i = 40; i <= 100; i += 20) {
                        progressFill.style.width = i + '%';
                        await new Promise(resolve => setTimeout(resolve, 300));
                    }
                    
                    const domain = new URL(url).hostname.replace('www.', '');
                    const brandName = domain.split('.')[0];
                    populateBrandResults(null, url, brandName);
                    progressText.style.color = 'var(--text-secondary)';
                    return;
                }
                
                progressText.textContent = 'Processing brand data...';
                progressFill.style.width = '60%';
                
                if (!response.ok) {
                    throw new Error(`API request failed: ${response.status}`);
                }
                
                const data = await response.json();
                
                progressText.textContent = 'Finalizing results...';
                progressFill.style.width = '100%';
                
                // Wait a moment to show completion
                await new Promise(resolve => setTimeout(resolve, 500));
                
                // Populate results with real data
                populateBrandResults(data, url);
                
                // Store brand data globally for use in personas
                window.brandData = data;
                
            } catch (error) {
                console.error('Brand extraction error:', error);
                
                // Show error message and use fallback
                progressText.textContent = 'API error. Using demo data...';
                progressText.style.color = 'var(--warning)';
                
                // Fallback to demo data after a delay
                setTimeout(() => {
                    const domain = new URL(url).hostname.replace('www.', '');
                    const brandName = domain.split('.')[0];
                    populateBrandResults(null, url, brandName);
                    progressText.style.color = 'var(--text-secondary)';
                }, 1500);
            }
            
            // Reset form
            extractText.style.display = 'inline';
            extractLoading.style.display = 'none';
            progressContainer.style.display = 'none';
            resultsContainer.style.display = 'block';
        });

        function populateBrandResults(apiData, url, fallbackName = null) {
            let logos, colors, fonts;
            
            if (apiData && apiData.success) {
                // Use real API data
                const data = apiData.data;
                
                // Extract logos
                logos = [];
                if (data.logos && data.logos.length > 0) {
                    data.logos.forEach((logo, index) => {
                        logos.push({
                            type: `Logo ${index + 1}`,
                            format: logo.url ? logo.url.split('.').pop().toUpperCase() : 'PNG',
                            url: logo.url || '#'
                        });
                    });
                } else {
                    logos = [{ type: 'No logos detected', format: 'N/A', url: '#' }];
                }
                
                // Extract colors
                colors = [];
                if (data.colors && data.colors.length > 0) {
                    data.colors.forEach((color, index) => {
                        colors.push({
                            hex: color.hex || color,
                            name: color.name || `Color ${index + 1}`
                        });
                    });
                } else {
                    colors = [{ hex: '#cccccc', name: 'No colors detected' }];
                }
                
                // Extract fonts
                fonts = [];
                if (data.fonts && data.fonts.length > 0) {
                    data.fonts.forEach(font => {
                        fonts.push({
                            family: font.family || font.name || font,
                            category: font.category || 'Sans-serif',
                            weight: font.weights ? font.weights.join(', ') : font.weight || '400'
                        });
                    });
                } else {
                    fonts = [{ family: 'No fonts detected', category: 'N/A', weight: 'N/A' }];
                }
            } else {
                // Fallback sample data
                const brandName = fallbackName || new URL(url).hostname.replace('www.', '').split('.')[0];
                
                logos = [
                    { type: 'Primary Logo', format: 'SVG', url: '#' },
                    { type: 'Icon', format: 'PNG', url: '#' },
                    { type: 'Wordmark', format: 'SVG', url: '#' }
                ];
                
                colors = [
                    { hex: '#dc2626', name: 'Brand Red' },
                    { hex: '#1f2937', name: 'Dark Gray' },
                    { hex: '#f3f4f6', name: 'Light Gray' },
                    { hex: '#ffffff', name: 'White' }
                ];
                
                fonts = [
                    { family: 'Inter', category: 'Sans-serif', weight: '400, 500, 600' },
                    { family: 'Roboto', category: 'Sans-serif', weight: '400, 700' }
                ];
            }
            
            // Populate logos
            const logosContainer = document.getElementById('logos-container');
            logosContainer.innerHTML = logos.map(logo => `
                <div class="chip">
                    <svg class="nav-icon" style="width: 16px; height: 16px; margin-right: 4px;" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    ${logo.type} (${logo.format})
                </div>
            `).join('');
            
            // Populate colors
            const colorsContainer = document.getElementById('colors-container');
            colorsContainer.innerHTML = colors.map(color => `
                <div class="chip">
                    <div class="color-swatch" style="background-color: ${color.hex}; width: 16px; height: 16px;"></div>
                    ${color.name} <span style="color: var(--text-muted);">${color.hex}</span>
                </div>
            `).join('');
            
            // Populate fonts
            const fontsContainer = document.getElementById('fonts-container');
            fontsContainer.innerHTML = fonts.map(font => `
                <div class="chip">
                    <span style="font-family: '${font.family}', sans-serif;">${font.family}</span>
                    <span style="color: var(--text-muted); margin-left: 4px;">(${font.weight})</span>
                </div>
            `).join('');
        }

        // Global variables to store data
        let marketResearchData = null;
        let generatedPersonas = [];

        // Claude API configuration
        const CLAUDE_API_KEY = 'CLAUDE_API_KEY';
        const CLAUDE_MODEL = 'CLAUDE_MODEL';

        // Claude API call function (via proxy to avoid CORS)
        async function generatePersonasWithClaude(companyProfile) {
            // For now, we'll simulate the API call since Claude API doesn't allow direct browser requests
            // In production, you'd need a server-side proxy
            console.log('Claude API called with profile:', companyProfile);
            
            // Simulate API delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Return realistic mock personas based on the company profile
            return generateMockPersonasFromProfile(companyProfile);
        }

        function generateMockPersonasFromProfile(companyProfile) {
            // Parse company profile to extract key details
            const profile = companyProfile.toLowerCase();
            
            // Extract industry/category
            let industry = 'general business';
            if (profile.includes('saas') || profile.includes('software')) industry = 'saas';
            else if (profile.includes('ecommerce') || profile.includes('retail')) industry = 'ecommerce';
            else if (profile.includes('agency') || profile.includes('marketing')) industry = 'agency';
            else if (profile.includes('healthcare') || profile.includes('medical')) industry = 'healthcare';
            else if (profile.includes('construction') || profile.includes('contractor')) industry = 'construction';
            
            // Generate personas based on industry
            const personas = [
                {
                    name: "Sarah Chen",
                    role: industry === 'saas' ? "Product Marketing Manager" : industry === 'ecommerce' ? "E-commerce Director" : "Marketing Manager",
                    businessContext: industry === 'saas' ? "Manages go-to-market for B2B software products" : industry === 'ecommerce' ? "Oversees online sales and customer acquisition" : "Drives lead generation and brand awareness",
                    painPoints: industry === 'saas' ? [
                        "Complex feature communication to non-technical buyers",
                        "Long sales cycles with multiple stakeholders",
                        "Proving ROI for marketing spend"
                    ] : industry === 'ecommerce' ? [
                        "High customer acquisition costs",
                        "Cart abandonment and conversion issues",
                        "Seasonal sales fluctuations"
                    ] : [
                        "Limited marketing budget and resources",
                        "Difficulty measuring campaign effectiveness",
                        "Keeping up with digital marketing trends"
                    ],
                    behaviors: [
                        "Checks analytics daily, especially Monday mornings",
                        "Active on LinkedIn and industry forums",
                        "Prefers email communication during business hours",
                        "Researches solutions thoroughly before purchase decisions"
                    ],
                    motivations: [
                        "Career advancement and recognition",
                        "Team efficiency and growth",
                        "Measurable business impact"
                    ],
                    budgetRange: industry === 'saas' ? "$5,000 - $15,000/month" : industry === 'ecommerce' ? "$3,000 - $12,000/month" : "$1,000 - $5,000/month",
                    objections: [
                        "Concerned about learning curve for team",
                        "Needs approval from leadership",
                        "Worried about implementation time"
                    ],
                    benefits: [
                        "Streamlined workflow saves 10+ hours per week",
                        "Better ROI tracking and reporting",
                        "Professional results without expensive agency"
                    ],
                    pitch: industry === 'saas' ? "Simplify your product marketing with data-driven creative tools that speak to technical and business buyers alike." : industry === 'ecommerce' ? "Boost online sales with conversion-optimized creatives that reduce acquisition costs and increase lifetime value." : "Get professional marketing results on a small business budget with AI-powered creative tools.",
                    cta: "Start Free Trial"
                },
                {
                    name: "Mike Rodriguez",
                    role: "Small Business Owner",
                    businessContext: "Runs a local service business with 5-15 employees",
                    painPoints: [
                        "No dedicated marketing team or expertise",
                        "High agency costs vs. limited budget",
                        "Time constraints for marketing activities"
                    ],
                    behaviors: [
                        "Works evenings and weekends",
                        "Checks phone for business updates throughout day",
                        "Prefers phone calls over email",
                        "Makes quick decisions when convinced of value"
                    ],
                    motivations: [
                        "Business growth and stability",
                        "Supporting family and employees",
                        "Building local reputation"
                    ],
                    budgetRange: "$300 - $1,500/month",
                    objections: [
                        "Skeptical of new technology promises",
                        "Prefers personal relationships over automation",
                        "Worried about ongoing costs"
                    ],
                    benefits: [
                        "Professional marketing materials without designer costs",
                        "More time to focus on core business operations",
                        "Increased local visibility and customer inquiries"
                    ],
                    pitch: "Get big-business marketing results for your local business without the big-business budget or complexity.",
                    cta: "See Pricing"
                },
                {
                    name: "Jessica Park",
                    role: industry === 'ecommerce' ? "E-commerce Manager" : "Digital Marketing Specialist",
                    businessContext: "Manages online presence for mid-size company",
                    painPoints: [
                        "Keeping up with platform algorithm changes",
                        "Creating enough content variety for multiple channels",
                        "Proving marketing attribution and ROI"
                    ],
                    behaviors: [
                        "Active on social media platforms daily",
                        "Attends virtual marketing webinars",
                        "Tests and iterates campaigns weekly",
                        "Collaborates via Slack and project management tools"
                    ],
                    motivations: [
                        "Staying ahead of marketing trends",
                        "Building personal brand expertise",
                        "Driving measurable business results"
                    ],
                    budgetRange: "$2,000 - $8,000/month",
                    objections: [
                        "Integration complexity with existing tools",
                        "Time needed to train team on new platform",
                        "Uncertainty about long-term platform stability"
                    ],
                    benefits: [
                        "Consistent content creation across all channels",
                        "Advanced analytics for campaign optimization",
                        "Template library that matches brand guidelines"
                    ],
                    pitch: "Scale your creative output and optimize performance across all digital channels with data-driven insights.",
                    cta: "Request Demo"
                },
                {
                    name: "David Kim",
                    role: "Agency Creative Director",
                    businessContext: "Leads creative team at marketing agency with 20-50 employees",
                    painPoints: [
                        "Client demands for faster turnaround times",
                        "Rising freelancer and production costs",
                        "Maintaining creative quality at scale"
                    ],
                    behaviors: [
                        "Reviews team work daily and gives feedback",
                        "Stays updated on design trends and tools",
                        "Manages multiple client relationships",
                        "Seeks efficiency tools that don't compromise quality"
                    ],
                    motivations: [
                        "Client satisfaction and retention",
                        "Team productivity and morale",
                        "Agency profitability and growth"
                    ],
                    budgetRange: "$10,000 - $30,000/month",
                    objections: [
                        "Concerns about AI replacing human creativity",
                        "Client acceptance of AI-generated content",
                        "Team adoption and workflow integration"
                    ],
                    benefits: [
                        "Faster concept development and iteration",
                        "Consistent quality across all team members",
                        "More time for strategic and creative thinking"
                    ],
                    pitch: "Enhance your creative team's capabilities with AI tools that amplify human creativity rather than replace it.",
                    cta: "Schedule Consultation"
                },
                {
                    name: "Lisa Thompson",
                    role: "Startup Co-founder",
                    businessContext: "Building early-stage company with limited resources",
                    painPoints: [
                        "Extremely tight budget constraints",
                        "Wearing multiple hats including marketing",
                        "Need for professional brand presence quickly"
                    ],
                    behaviors: [
                        "Works unconventional hours",
                        "Active in startup communities and forums",
                        "Seeks growth hacking tactics and free resources",
                        "Makes decisions quickly when benefits are clear"
                    ],
                    motivations: [
                        "Achieving product-market fit",
                        "Attracting investors and customers",
                        "Building sustainable business foundation"
                    ],
                    budgetRange: "$100 - $800/month",
                    objections: [
                        "Cash flow uncertainty",
                        "Need for immediate ROI",
                        "Preference for pay-as-you-go pricing"
                    ],
                    benefits: [
                        "Professional brand presence from day one",
                        "Marketing automation that scales with growth",
                        "Cost-effective alternative to hiring marketing team"
                    ],
                    pitch: "Build a professional marketing foundation that grows with your startup, from MVP to market leader.",
                    cta: "Start Free"
                }
            ];
            
            return personas;
        }

        // Research data fetching
        document.getElementById('fetch-research').addEventListener('click', async () => {
            let domain = document.getElementById('research-domain').value.trim();
            if (!domain) {
                alert('Please enter a domain name');
                return;
            }

            // Clean up domain - extract domain from full URL if provided
            try {
                if (domain.includes('http')) {
                    domain = new URL(domain).hostname;
                }
                // Remove www. prefix if present
                domain = domain.replace(/^www\./, '');
            } catch (e) {
                // If URL parsing fails, assume it's already a clean domain
                domain = domain.replace(/^www\./, '');
            }

            const researchText = document.getElementById('research-text');
            const researchLoading = document.getElementById('research-loading');
            const researchStatus = document.getElementById('research-status');

            // Show loading state
            researchText.style.display = 'none';
            researchLoading.style.display = 'inline-block';
            
            try {
                const response = await fetch(`/research/?company=${encodeURIComponent(domain)}&format=json`, {
                    credentials: 'same-origin'
                });
                const data = await response.json();
                
                if (data.success && data.cached) {
                    marketResearchData = data;
                    researchStatus.innerHTML = `
                        <div class="alert alert-success">
                            <strong>Research data loaded successfully!</strong><br>
                            Company: ${data.report.companyInfo?.name || domain}<br>
                            Industry: ${data.report.companyInfo?.industry || 'N/A'}<br>
                            Cache age: ${data.cache_age_days} days<br>
                            <small>Form fields auto-populated with research data</small>
                        </div>
                    `;
                    researchStatus.style.display = 'block';
                    
                    // Auto-fill form fields with research data
                    autoFillFromResearch(data.report);
                } else {
                    researchStatus.innerHTML = `
                        <div class="alert alert-error">
                            <strong>No cached research found for ${domain}</strong><br>
                            ${data.suggestion || 'You may need to generate a research report first.'}
                        </div>
                    `;
                    researchStatus.style.display = 'block';
                    marketResearchData = null;
                }
            } catch (error) {
                console.error('Research fetch error:', error);
                researchStatus.innerHTML = `
                    <div class="alert alert-error">
                        <strong>Error fetching research data</strong><br>
                        ${error.message || 'Please check the domain and try again.'}
                    </div>
                `;
                researchStatus.style.display = 'block';
                marketResearchData = null;
            }

            // Reset loading state
            researchText.style.display = 'inline';
            researchLoading.style.display = 'none';
        });

        function autoFillFromResearch(report) {
            // Auto-fill form fields based on research data
            if (report.companyInfo) {
                const companyInfo = report.companyInfo;
                
                if (companyInfo.name && !document.getElementById('company-name').value) {
                    document.getElementById('company-name').value = companyInfo.name;
                }
                
                if (companyInfo.industry && !document.getElementById('product-category').value) {
                    // Try to infer product category from industry
                    let category = companyInfo.industry;
                    if (companyInfo.description) {
                        category += ' - ' + companyInfo.description.substring(0, 50);
                    }
                    document.getElementById('product-category').value = category;
                }
                
                if (companyInfo.headquarters && !document.getElementById('geographic-markets').value) {
                    // Infer geographic markets from headquarters
                    const location = companyInfo.headquarters;
                    if (location.includes('CA') || location.includes('California')) {
                        document.getElementById('geographic-markets').value = 'US, California';
                    } else if (location.includes('US') || location.includes('USA')) {
                        document.getElementById('geographic-markets').value = 'US';
                    } else {
                        document.getElementById('geographic-markets').value = location;
                    }
                }
                
                if (companyInfo.employees && !document.getElementById('customer-size').value) {
                    document.getElementById('customer-size').value = `Target: ${companyInfo.employees}`;
                }
            }
            
            // Fill competitors if available
            if (report.competitorAnalysis && report.competitorAnalysis.length > 0 && !document.getElementById('key-competitors').value) {
                const competitors = report.competitorAnalysis.slice(0, 4).map(c => c.name).join(', ');
                document.getElementById('key-competitors').value = competitors;
            }
            
            // Fill business goals from marketing insights
            if (report.marketingInsights && !document.getElementById('business-goals').value) {
                let goals = [];
                if (report.marketingInsights.summary) {
                    goals.push(`Focus on: ${report.marketingInsights.summary.substring(0, 40)}...`);
                }
                if (report.marketResearch?.targetDemographics) {
                    goals.push(`Target: ${report.marketResearch.targetDemographics}`);
                }
                if (report.marketResearch?.marketSize) {
                    goals.push(`Market size: ${report.marketResearch.marketSize}`);
                }
                
                if (goals.length > 0) {
                    document.getElementById('business-goals').value = goals.join('\n');
                }
            }
            
            // Fill demographics from research
            if (report.marketResearch?.targetDemographics && !document.getElementById('must-include').value) {
                document.getElementById('must-include').value = report.marketResearch.targetDemographics;
            }
            
            // Try to infer brand voice from marketing insights
            if (report.marketingInsights?.messagingStrategy && !document.getElementById('brand-voice').value) {
                document.getElementById('brand-voice').value = report.marketingInsights.messagingStrategy;
            }
        }

        // AI-powered personas generation
        document.getElementById('generate-personas').addEventListener('click', async () => {
            const button = document.getElementById('generate-personas');
            const loading = document.getElementById('personas-loading');
            const resultsContainer = document.getElementById('personas-results');
            
            // Collect form data
            const companyProfile = buildCompanyProfile();
            
            // Check requirements - less strict if we have research data
            const hasResearchData = marketResearchData && marketResearchData.success;
            const companyName = document.getElementById('company-name').value.trim();
            
            if (!hasResearchData && (!companyName || companyName === '')) {
                alert('Please fill in at least the company name, or fetch pre-research data first.');
                return;
            }
            
            // Show loading
            button.disabled = true;
            loading.style.display = 'inline-block';
            
            try {
                // Call Claude API to generate personas
                const personas = await generatePersonasWithClaude(companyProfile);
                generatedPersonas = personas; // Store globally
                
                // Show success message
                resultsContainer.innerHTML = `
                    <div class="alert alert-success" style="margin-bottom: 24px;">
                        <strong>5 personas generated with Claude AI!</strong><br>
                        Based on your company profile and ${marketResearchData ? 'market research data' : 'industry insights'}
                    </div>
                    <div style="display: flex; gap: 12px; margin-bottom: 24px; align-items: center;">
                        <button id="generate-more" class="button button-secondary">Generate 5 More</button>
                        <button id="download-personas" class="button button-secondary">Download as Markdown</button>
                        <button id="download-txt" class="button button-secondary">Download as TXT</button>
                        <span style="color: var(--text-muted); font-size: 12px;">${personas.length} personas total</span>
                    </div>
                `;
                
                // Render personas
                renderPersonas(personas, resultsContainer);
                
                // Add event listeners for new buttons
                setupPersonaActions();
                setupDownloadButtons();
                
            } catch (error) {
                console.error('Persona generation error:', error);
                
                // Show error and fallback
                resultsContainer.innerHTML = `
                    <div class="alert alert-error" style="margin-bottom: 24px;">
                        <strong>AI generation failed:</strong> ${error.message}<br>
                        Using sample personas as fallback.
                    </div>
                `;
                
                // Use sample personas as fallback
                const fallbackPersonas = generateContextualPersonas(marketResearchData, window.brandData, companyProfile);
                renderPersonas(fallbackPersonas, resultsContainer);
            }
            
            // Reset button
            button.disabled = false;
            loading.style.display = 'none';
        });

        // Use template button functionality
        document.getElementById('use-template').addEventListener('click', () => {
            // Fill form with example data
            document.getElementById('company-name').value = 'Acme Webworks';
            document.getElementById('product-category').value = 'Website redesign + basic SEO for local small businesses';
            document.getElementById('core-features').value = '- One-week 5-page website package\n- On-page SEO + Google Business Profile setup\n- Monthly $299 maintenance & conversion tweaks\n- No-code CMS with training video';
            document.getElementById('geographic-markets').value = 'US, Canada';
            document.getElementById('customer-size').value = 'solo to 10 employees';
            document.getElementById('pricing-model').value = 'One-time $1,800 for site + $299/mo retainer';
            document.getElementById('key-competitors').value = 'Local web agencies, Wix Marketplace, Upwork freelancers';
            document.getElementById('brand-voice').value = 'Practical, budget-friendly, hands-on';
            document.getElementById('business-goals').value = 'Increase monthly lead volume by 40%, reduce churn, build case studies';
            document.getElementById('must-include').value = 'retail, health & wellness, professional services';
            document.getElementById('disallowed').value = 'enterprise, finance per compliance';
        });

        function buildCompanyProfile() {
            const companyName = document.getElementById('company-name').value;
            const productCategory = document.getElementById('product-category').value;
            const coreFeatures = document.getElementById('core-features').value;
            const geographicMarkets = document.getElementById('geographic-markets').value;
            const customerSize = document.getElementById('customer-size').value;
            const pricingModel = document.getElementById('pricing-model').value;
            const keyCompetitors = document.getElementById('key-competitors').value;
            const brandVoice = document.getElementById('brand-voice').value;
            const businessGoals = document.getElementById('business-goals').value;
            const mustInclude = document.getElementById('must-include').value;
            const disallowed = document.getElementById('disallowed').value;

            let profile = `Company name: ${companyName}
Product/service category: ${productCategory}
Core features & benefits: ${coreFeatures}
Primary geographic markets: ${geographicMarkets}
Typical customer size: ${customerSize}
Pricing model and typical spend: ${pricingModel}
Key competitors or reference brands: ${keyCompetitors}
Brand voice and positioning: ${brandVoice}
Top 3 business goals for next 12 months: ${businessGoals}
Must-include demographics or verticals: ${mustInclude}
Disallowed industries or audiences: ${disallowed}

Output format required: JSON
Tone: concise & practical`;

            // Add research context if available
            if (marketResearchData && marketResearchData.report) {
                const report = marketResearchData.report;
                profile += `\n\nAdditional Context from Market Research:
Company: ${report.companyInfo?.name || 'N/A'}
Industry: ${report.companyInfo?.industry || 'N/A'}
Target Demographics: ${report.marketResearch?.targetDemographics || 'N/A'}`;
                
                if (report.competitorAnalysis && report.competitorAnalysis.length > 0) {
                    profile += `\nTop Competitors: ${report.competitorAnalysis.slice(0, 3).map(c => c.name).join(', ')}`;
                }
            }

            return profile;
        }

        function generateContextualPersonas(researchData, brandData, companyProfile) {
            // Enhanced persona generation based on available context
            let contextualPersonas = [...samplePersonas]; // Start with base personas
            
            if (researchData && researchData.report) {
                const report = researchData.report;
                
                // Customize personas based on industry
                if (report.companyInfo?.industry) {
                    const industry = report.companyInfo.industry.toLowerCase();
                    
                    if (industry.includes('ecommerce') || industry.includes('retail')) {
                        contextualPersonas[0].role = 'E-commerce Manager';
                        contextualPersonas[0].pains = [
                            'High customer acquisition costs',
                            'Cart abandonment issues',
                            'Seasonal sales fluctuations'
                        ];
                        contextualPersonas[0].pitch = 'Boost your online sales with data-driven creative optimization.';
                    } else if (industry.includes('saas') || industry.includes('software')) {
                        contextualPersonas[0].role = 'Product Marketing Manager';
                        contextualPersonas[0].pains = [
                            'Complex feature communication',
                            'Long sales cycles',
                            'Competitive differentiation'
                        ];
                        contextualPersonas[0].pitch = 'Simplify complex features with compelling visual storytelling.';
                    } else if (industry.includes('health') || industry.includes('medical')) {
                        contextualPersonas[0].role = 'Healthcare Marketing Director';
                        contextualPersonas[0].pains = [
                            'Regulatory compliance concerns',
                            'Trust building challenges',
                            'Patient education complexity'
                        ];
                        contextualPersonas[0].pitch = 'Build patient trust with compliant, educational creative content.';
                    }
                }
                
                // Adjust based on target demographics
                if (report.marketResearch?.targetDemographics) {
                    contextualPersonas[1].behaviors = [
                        `Targets ${report.marketResearch.targetDemographics}`,
                        'Uses data-driven marketing approaches',
                        'Focuses on ROI optimization'
                    ];
                }
                
                // Include competitor insights
                if (report.competitorAnalysis && report.competitorAnalysis.length > 0) {
                    const competitor = report.competitorAnalysis[0];
                    contextualPersonas[2].pains.push(`Competing against ${competitor.name}`);
                    contextualPersonas[2].motivations.push('Competitive advantage through creative differentiation');
                }
            }
            
            if (brandData && brandData.data) {
                // Customize based on brand colors/style
                if (brandData.data.colors && brandData.data.colors.length > 0) {
                    contextualPersonas[3].benefits.push('Brand-consistent creative production');
                }
                
                if (brandData.data.fonts && brandData.data.fonts.length > 0) {
                    contextualPersonas[3].benefits.push('Typography-matched design assets');
                }
            }
            
            if (companyProfile) {
                // Add custom company insights to personas
                contextualPersonas[4].behaviors.push('Considers company-specific requirements');
                contextualPersonas[4].pitch = `Tailored solutions for your specific business context: ${companyProfile.substring(0, 50)}...`;
            }
            
            return contextualPersonas;
        }

        function renderPersonas(personas, container) {
            const personasHtml = personas.map((persona, index) => `
                <div class="persona-card" data-persona-index="${index}">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px;">
                        <div>
                            <div class="persona-title">${persona.name || persona.role || 'Unnamed Persona'}</div>
                            <div class="persona-role">${persona.role || persona.businessContext || 'No role specified'}</div>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button class="button button-secondary edit-persona" data-index="${index}" style="padding: 4px 8px; font-size: 12px;">Edit</button>
                            <button class="button" style="background: var(--brand-red); color: white; padding: 4px 8px; font-size: 12px;" onclick="deletePersona(${index})">Delete</button>
                        </div>
                    </div>
                    
                    ${persona.businessContext ? `<div style="margin-bottom: 12px;"><strong>Business Context:</strong> ${persona.businessContext}</div>` : ''}
                    
                    <div style="margin-bottom: 12px;">
                        <strong>Key Pain Points:</strong>
                        <ul style="margin: 4px 0 0 20px; color: var(--text-secondary);">
                            ${(persona.painPoints || persona.pains || []).map(pain => `<li>${pain}</li>`).join('')}
                        </ul>
                    </div>
                    
                    ${persona.behaviors ? `
                    <div style="margin-bottom: 12px;">
                        <strong>Behaviors:</strong>
                        <ul style="margin: 4px 0 0 20px; color: var(--text-secondary);">
                            ${persona.behaviors.map(behavior => `<li>${behavior}</li>`).join('')}
                        </ul>
                    </div>` : ''}
                    
                    <div style="margin-bottom: 12px;">
                        <strong>Budget Range:</strong> <span style="color: var(--success);">${persona.budgetRange || 'Not specified'}</span>
                    </div>
                    
                    ${persona.objections ? `
                    <div style="margin-bottom: 12px;">
                        <strong>Objections:</strong>
                        <ul style="margin: 4px 0 0 20px; color: var(--text-muted);">
                            ${persona.objections.map(objection => `<li>${objection}</li>`).join('')}
                        </ul>
                    </div>` : ''}
                    
                    ${persona.benefits ? `
                    <div style="margin-bottom: 12px;">
                        <strong>How We Help:</strong>
                        <ul style="margin: 4px 0 0 20px; color: var(--success);">
                            ${persona.benefits.map(benefit => `<li>${benefit}</li>`).join('')}
                        </ul>
                    </div>` : ''}
                    
                    <div style="margin-bottom: 12px;">
                        <strong>Pitch:</strong> ${persona.pitch || 'No pitch provided'}
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 16px;">
                        <span class="chip" style="background: var(--brand-red); color: white;">${persona.cta || 'Contact Us'}</span>
                        <button class="button button-secondary view-details" data-index="${index}" style="padding: 8px 16px;">View Full Details</button>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML += personasHtml;
        }

        function setupPersonaActions() {
            // Generate more personas
            document.getElementById('generate-more')?.addEventListener('click', async () => {
                const button = document.getElementById('generate-more');
                const originalText = button.textContent;
                
                button.textContent = 'Generating...';
                button.disabled = true;
                
                try {
                    const companyProfile = buildCompanyProfile();
                    const newPersonas = await generatePersonasWithClaude(companyProfile);
                    generatedPersonas = [...generatedPersonas, ...newPersonas];
                    
                    const resultsContainer = document.getElementById('personas-results');
                    renderPersonas(newPersonas, resultsContainer);
                    
                    // Update count
                    const countSpan = document.querySelector('#personas-results span[style*="color: var(--text-muted)"]');
                    if (countSpan) {
                        countSpan.textContent = `${generatedPersonas.length} personas total`;
                    }
                    
                } catch (error) {
                    alert('Failed to generate additional personas: ' + error.message);
                }
                
                button.textContent = originalText;
                button.disabled = false;
            });

            // View details functionality
            document.querySelectorAll('.view-details').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    const persona = generatedPersonas[index];
                    showPersonaModal(persona, index);
                });
            });

            // Edit functionality
            document.querySelectorAll('.edit-persona').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    editPersona(index);
                });
            });
        }

        function deletePersona(index) {
            if (confirm('Are you sure you want to delete this persona?')) {
                generatedPersonas.splice(index, 1);
                refreshPersonasDisplay();
            }
        }

        function editPersona(index) {
            const persona = generatedPersonas[index];
            const newName = prompt('Edit persona name:', persona.name || '');
            if (newName !== null) {
                generatedPersonas[index].name = newName;
                refreshPersonasDisplay();
            }
        }

        function refreshPersonasDisplay() {
            const resultsContainer = document.getElementById('personas-results');
            const header = resultsContainer.querySelector('.alert');
            const controls = resultsContainer.querySelector('div[style*="display: flex"]');
            
            resultsContainer.innerHTML = '';
            if (header) resultsContainer.appendChild(header.cloneNode(true));
            if (controls) resultsContainer.appendChild(controls.cloneNode(true));
            
            renderPersonas(generatedPersonas, resultsContainer);
            setupPersonaActions();
            
            // Update count
            const countSpan = document.querySelector('#personas-results span[style*="color: var(--text-muted)"]');
            if (countSpan) {
                countSpan.textContent = `${generatedPersonas.length} personas total`;
            }
        }

        function showPersonaModal(persona, index) {
            const modal = document.createElement('div');
            modal.className = 'modal active';
            modal.innerHTML = `
                <div class="modal-content" style="max-width: 600px;">
                    <div class="modal-title">${persona.name} - Full Details</div>
                    <div style="max-height: 70vh; overflow-y: auto;">
                        <p><strong>Role:</strong> ${persona.role}</p>
                        ${persona.businessContext ? `<p><strong>Business Context:</strong> ${persona.businessContext}</p>` : ''}
                        
                        <h4>Pain Points:</h4>
                        <ul>${(persona.painPoints || persona.pains || []).map(pain => `<li>${pain}</li>`).join('')}</ul>
                        
                        ${persona.behaviors ? `<h4>Behaviors:</h4><ul>${persona.behaviors.map(b => `<li>${b}</li>`).join('')}</ul>` : ''}
                        ${persona.motivations ? `<h4>Motivations:</h4><ul>${persona.motivations.map(m => `<li>${m}</li>`).join('')}</ul>` : ''}
                        ${persona.objections ? `<h4>Objections:</h4><ul>${persona.objections.map(o => `<li>${o}</li>`).join('')}</ul>` : ''}
                        ${persona.benefits ? `<h4>How We Help:</h4><ul>${persona.benefits.map(b => `<li>${b}</li>`).join('')}</ul>` : ''}
                        
                        <p><strong>Budget Range:</strong> ${persona.budgetRange}</p>
                        <p><strong>Pitch:</strong> ${persona.pitch}</p>
                        <p><strong>CTA:</strong> ${persona.cta}</p>
                    </div>
                    <div style="display: flex; gap: 16px; justify-content: flex-end; margin-top: 24px;">
                        <button class="button button-secondary" onclick="this.closest('.modal').remove()">Close</button>
                        <button class="button button-primary" onclick="editPersona(${index}); this.closest('.modal').remove();">Edit</button>
                    </div>
                </div>
            `;
            
            // Close on click outside
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
            
            document.body.appendChild(modal);
        }

        function setupDownloadButtons() {
            // Download as Markdown
            document.getElementById('download-personas')?.addEventListener('click', () => {
                const markdown = generateMarkdownExport();
                downloadFile(markdown, 'customer-personas.md', 'text/markdown');
            });

            // Download as TXT
            document.getElementById('download-txt')?.addEventListener('click', () => {
                const txtContent = generateTxtExport();
                downloadFile(txtContent, 'customer-personas.txt', 'text/plain');
            });
        }

        function generateMarkdownExport() {
            const companyName = document.getElementById('company-name').value || 'Company';
            const currentDate = new Date().toLocaleDateString();
            
            let markdown = `# Customer Personas for ${companyName}\n\n`;
            markdown += `*Generated on ${currentDate} using AI-powered analysis*\n\n`;
            markdown += `---\n\n`;

            generatedPersonas.forEach((persona, index) => {
                markdown += `## ${index + 1}. ${persona.name || 'Persona ' + (index + 1)}\n\n`;
                markdown += `**Role:** ${persona.role || 'Not specified'}\n\n`;
                
                if (persona.businessContext) {
                    markdown += `**Business Context:** ${persona.businessContext}\n\n`;
                }

                markdown += `### Pain Points\n`;
                (persona.painPoints || persona.pains || []).forEach(pain => {
                    markdown += `- ${pain}\n`;
                });
                markdown += `\n`;

                if (persona.behaviors && persona.behaviors.length > 0) {
                    markdown += `### Behaviors\n`;
                    persona.behaviors.forEach(behavior => {
                        markdown += `- ${behavior}\n`;
                    });
                    markdown += `\n`;
                }

                if (persona.motivations && persona.motivations.length > 0) {
                    markdown += `### Motivations\n`;
                    persona.motivations.forEach(motivation => {
                        markdown += `- ${motivation}\n`;
                    });
                    markdown += `\n`;
                }

                markdown += `**Budget Range:** ${persona.budgetRange || 'Not specified'}\n\n`;

                if (persona.objections && persona.objections.length > 0) {
                    markdown += `### Objections\n`;
                    persona.objections.forEach(objection => {
                        markdown += `- ${objection}\n`;
                    });
                    markdown += `\n`;
                }

                if (persona.benefits && persona.benefits.length > 0) {
                    markdown += `### How We Help\n`;
                    persona.benefits.forEach(benefit => {
                        markdown += `- ${benefit}\n`;
                    });
                    markdown += `\n`;
                }

                markdown += `**Elevator Pitch:** ${persona.pitch || 'Not provided'}\n\n`;
                markdown += `**Call to Action:** ${persona.cta || 'Contact Us'}\n\n`;
                markdown += `---\n\n`;
            });

            markdown += `*Generated with Branding UI - Brand Intelligence Platform*`;
            return markdown;
        }

        function generateTxtExport() {
            const companyName = document.getElementById('company-name').value || 'Company';
            const currentDate = new Date().toLocaleDateString();
            
            let txt = `CUSTOMER PERSONAS FOR ${companyName.toUpperCase()}\n`;
            txt += `Generated on ${currentDate} using AI-powered analysis\n`;
            txt += `${'='.repeat(60)}\n\n`;

            generatedPersonas.forEach((persona, index) => {
                txt += `${index + 1}. ${(persona.name || 'Persona ' + (index + 1)).toUpperCase()}\n`;
                txt += `${'-'.repeat(40)}\n\n`;
                
                txt += `Role: ${persona.role || 'Not specified'}\n\n`;
                
                if (persona.businessContext) {
                    txt += `Business Context: ${persona.businessContext}\n\n`;
                }

                txt += `Pain Points:\n`;
                (persona.painPoints || persona.pains || []).forEach(pain => {
                    txt += `  • ${pain}\n`;
                });
                txt += `\n`;

                if (persona.behaviors && persona.behaviors.length > 0) {
                    txt += `Behaviors:\n`;
                    persona.behaviors.forEach(behavior => {
                        txt += `  • ${behavior}\n`;
                    });
                    txt += `\n`;
                }

                if (persona.motivations && persona.motivations.length > 0) {
                    txt += `Motivations:\n`;
                    persona.motivations.forEach(motivation => {
                        txt += `  • ${motivation}\n`;
                    });
                    txt += `\n`;
                }

                txt += `Budget Range: ${persona.budgetRange || 'Not specified'}\n\n`;

                if (persona.objections && persona.objections.length > 0) {
                    txt += `Objections:\n`;
                    persona.objections.forEach(objection => {
                        txt += `  • ${objection}\n`;
                    });
                    txt += `\n`;
                }

                if (persona.benefits && persona.benefits.length > 0) {
                    txt += `How We Help:\n`;
                    persona.benefits.forEach(benefit => {
                        txt += `  • ${benefit}\n`;
                    });
                    txt += `\n`;
                }

                txt += `Elevator Pitch: ${persona.pitch || 'Not provided'}\n\n`;
                txt += `Call to Action: ${persona.cta || 'Contact Us'}\n\n`;
                txt += `${'='.repeat(60)}\n\n`;
            });

            txt += `Generated with Branding UI - Brand Intelligence Platform`;
            return txt;
        }

        function downloadFile(content, filename, contentType) {
            const blob = new Blob([content], { type: contentType });
            const url = URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            URL.revokeObjectURL(url);
        }

        // Competitors functionality
        document.getElementById('add-competitor').addEventListener('click', () => {
            const input = document.getElementById('competitor-name');
            const name = input.value.trim();
            
            if (!name) return;
            
            addCompetitor(name);
            input.value = '';
        });

        function addCompetitor(name) {
            const tableBody = document.getElementById('competitors-table-body');
            
            // Remove empty state if it exists
            const emptyState = tableBody.querySelector('.empty-state');
            if (emptyState) {
                tableBody.innerHTML = '';
            }
            
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${name}</td>
                <td>
                    <div class="chip">Meta</div>
                    <div class="chip">TikTok</div>
                </td>
                <td>23</td>
                <td>2 hours ago</td>
                <td>
                    <button class="button button-secondary" style="padding: 6px 12px; font-size: 12px;" onclick="viewCompetitorAds('${name}')">
                        View Ads
                    </button>
                </td>
            `;
            
            tableBody.appendChild(row);
        }

        function viewCompetitorAds(name) {
            alert(`Viewing ads for ${name}\n\nThis would show a detailed breakdown of their advertising strategy, including:\n- Creative formats and types\n- Messaging themes\n- Campaign objectives\n- Performance insights\n- Shareable summary report`);
        }

        // Templates functionality
        function populateTemplates() {
            const templatesGrid = document.getElementById('templates-grid');
            
            templatesGrid.innerHTML = sampleTemplates.map(template => `
                <div class="template-card" onclick="selectTemplate(${template.id})">
                    <div class="template-preview">
                        <svg fill="currentColor" width="32" height="32" viewBox="0 0 24 24">
                            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                    </div>
                    <div class="card-title" style="font-size: 14px; margin-bottom: 4px;">${template.title}</div>
                    <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                        <span class="chip" style="font-size: 10px;">${template.type}</span>
                        <span class="chip" style="font-size: 10px;">${template.industry}</span>
                    </div>
                </div>
            `).join('');
        }

        function selectTemplate(templateId) {
            const template = sampleTemplates.find(t => t.id === templateId);
            alert(`Selected: ${template.title}\n\nThis template would be used for generating new creatives. You can customize it with your brand assets and messaging.`);
        }

        // Initialize templates
        populateTemplates();

        // Filter functionality for templates
        const filters = ['industry-filter', 'type-filter', 'objective-filter'];
        filters.forEach(filterId => {
            document.getElementById(filterId).addEventListener('change', filterTemplates);
        });

        function filterTemplates() {
            const industry = document.getElementById('industry-filter').value;
            const type = document.getElementById('type-filter').value;
            const objective = document.getElementById('objective-filter').value;
            
            const filtered = sampleTemplates.filter(template => {
                return (industry === 'all' || template.industry === industry || template.industry === 'all') &&
                       (type === 'all' || template.type === type) &&
                       (objective === 'all' || template.objective === objective);
            });
            
            const templatesGrid = document.getElementById('templates-grid');
            templatesGrid.innerHTML = filtered.map(template => `
                <div class="template-card" onclick="selectTemplate(${template.id})">
                    <div class="template-preview">
                        <svg fill="currentColor" width="32" height="32" viewBox="0 0 24 24">
                            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                    </div>
                    <div class="card-title" style="font-size: 14px; margin-bottom: 4px;">${template.title}</div>
                    <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                        <span class="chip" style="font-size: 10px;">${template.type}</span>
                        <span class="chip" style="font-size: 10px;">${template.industry}</span>
                    </div>
                </div>
            `).join('');
        }

        // Generations functionality
        document.getElementById('new-generation').addEventListener('click', () => {
            openModal('generation-modal');
        });

        document.getElementById('generation-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const type = document.getElementById('generation-type').value;
            const prompt = document.getElementById('generation-prompt').value;
            
            closeModal('generation-modal');
            
            // Add to generations grid
            addGeneration(type, prompt);
            
            // Reset form
            document.getElementById('generation-form').reset();
        });

        function addGeneration(type, prompt) {
            const generationsGrid = document.getElementById('generations-grid');
            
            const generationCard = document.createElement('div');
            generationCard.className = 'generation-card';
            generationCard.innerHTML = `
                <div class="generation-preview">
                    <div class="loading"></div>
                </div>
                <div style="font-size: 14px; font-weight: 500; margin-bottom: 4px;">${type.charAt(0).toUpperCase() + type.slice(1)} Ad</div>
                <div style="font-size: 12px; color: var(--text-muted); margin-bottom: 8px;">${prompt.substring(0, 60)}...</div>
                <div class="status-badge status-warning">Processing</div>
                <div class="generation-actions">
                    <button class="button button-secondary" style="padding: 6px 12px; font-size: 12px;">Remix</button>
                    <button class="button button-secondary" style="padding: 6px 12px; font-size: 12px;">Download</button>
                </div>
            `;
            
            generationsGrid.insertBefore(generationCard, generationsGrid.firstChild);
            
            // Simulate completion
            setTimeout(() => {
                const preview = generationCard.querySelector('.generation-preview');
                const status = generationCard.querySelector('.status-badge');
                
                preview.innerHTML = `
                    <svg fill="currentColor" width="32" height="32" viewBox="0 0 24 24">
                        <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                `;
                
                status.className = 'status-badge status-success';
                status.textContent = 'Completed';
            }, 3000);
        }

        // Models functionality
        document.getElementById('create-model').addEventListener('click', () => {
            openModal('model-modal');
        });

        document.getElementById('model-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const type = document.getElementById('model-type').value;
            const description = document.getElementById('model-description').value;
            
            closeModal('model-modal');
            
            // Add to models grid
            addModel(type, description);
            
            // Reset form
            document.getElementById('model-form').reset();
        });

        function addModel(type, description) {
            const modelsGrid = document.getElementById('models-grid');
            
            // Remove empty state if it exists
            const emptyState = modelsGrid.querySelector('.empty-state');
            if (emptyState) {
                modelsGrid.innerHTML = '';
            }
            
            const modelCard = document.createElement('div');
            modelCard.className = 'model-card';
            modelCard.innerHTML = `
                <div class="model-avatar">
                    <div class="loading"></div>
                </div>
                <div style="font-weight: 500; margin-bottom: 4px;">${type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}</div>
                <div style="font-size: 12px; color: var(--text-muted); margin-bottom: 12px;">${description.substring(0, 80)}...</div>
                <div class="status-badge status-warning">Creating</div>
                <div style="margin-top: 16px;">
                    <button class="button button-primary" style="width: 100%; padding: 8px;">Generate Video</button>
                </div>
            `;
            
            modelsGrid.appendChild(modelCard);
            
            // Simulate completion
            setTimeout(() => {
                const avatar = modelCard.querySelector('.model-avatar');
                const status = modelCard.querySelector('.status-badge');
                
                avatar.innerHTML = `
                    <svg fill="currentColor" width="32" height="32" viewBox="0 0 24 24">
                        <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                `;
                
                status.className = 'status-badge status-success';
                status.textContent = 'Ready';
            }, 4000);
        }

        // Modal functionality
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        // Close modals when clicking outside
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                }
            });
        });

        // Initialize the app with some sample data
        window.addEventListener('load', () => {
            // Populate sample generations
            const generationsGrid = document.getElementById('generations-grid');
            const sampleGenerations = [
                { type: 'image', prompt: 'Modern e-commerce hero banner with product showcase', status: 'completed' },
                { type: 'video', prompt: 'SaaS feature demonstration with screen recording', status: 'completed' },
                { type: 'banner', prompt: 'Social proof banner with customer testimonials', status: 'processing' }
            ];
            
            sampleGenerations.forEach(gen => {
                const card = document.createElement('div');
                card.className = 'generation-card';
                card.innerHTML = `
                    <div class="generation-preview">
                        <svg fill="currentColor" width="32" height="32" viewBox="0 0 24 24">
                            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                    </div>
                    <div style="font-size: 14px; font-weight: 500; margin-bottom: 4px;">${gen.type.charAt(0).toUpperCase() + gen.type.slice(1)} Ad</div>
                    <div style="font-size: 12px; color: var(--text-muted); margin-bottom: 8px;">${gen.prompt.substring(0, 60)}...</div>
                    <div class="status-badge ${gen.status === 'completed' ? 'status-success' : 'status-warning'}">${gen.status === 'completed' ? 'Completed' : 'Processing'}</div>
                    <div class="generation-actions">
                        <button class="button button-secondary" style="padding: 6px 12px; font-size: 12px;">Remix</button>
                        <button class="button button-secondary" style="padding: 6px 12px; font-size: 12px;">Download</button>
                    </div>
                `;
                generationsGrid.appendChild(card);
            });
            
            console.log('Branding UI prototype loaded successfully');
        });
    </script>
</body>
</html>