import { useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { ArrowLeft, Link as LinkIcon, Package, Server, Layers, FileText, Loader } from 'lucide-react'
import axios from 'axios'
import { scrapePage } from '@/services/api/brandServicesApi'
import './ProductServiceAutoFill.css'

type ItemType = 'product' | 'service'
type PageType = 'single' | 'collection'

interface ParsedItem {
  name: string
  category: string
  description: string
  price: string
  features: string[]
  image_urls: string[]
  cturl?: string
}

const ProductServiceAutoFill = () => {
  const navigate = useNavigate()
  const { slug, shortId } = useParams()

  const [step, setStep] = useState<'url' | 'type' | 'processing'>('url')
  const [url, setUrl] = useState('')
  const [itemType, setItemType] = useState<ItemType>('product')
  const [pageType, setPageType] = useState<PageType>('single')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)

  const handleUrlSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!url.trim()) {
      setError('Please enter a URL')
      return
    }

    // Validate URL format
    try {
      new URL(url)
      setError('')
      setStep('type')
    } catch {
      setError('Please enter a valid URL')
    }
  }

  const handleTypeSubmit = async () => {
    setStep('processing')
    setLoading(true)
    setError('')

    try {
      // Step 1: Scrape the page
      console.log('üîç Scraping page:', url)
      const scrapeResult = await scrapePage({
        url,
        limit: pageType === 'collection' ? 20 : 4, // More images for collections
        includeContent: true,
        maxContentLength: pageType === 'collection' ? 100000 : 50000
      })

      const result = scrapeResult.results[0]

      if (!result.found && (!result.content || !result.content.text)) {
        throw new Error('Could not extract content from the page')
      }

      if (result.errors.length > 0) {
        console.warn('Scraping warnings:', result.errors)
      }

      // Step 2: Parse with AI
      console.log('ü§ñ Parsing content with AI...')
      const parseResponse = await axios.post(
        `${import.meta.env.VITE_API_BASE_URL}/api/ai`,
        {
          action: 'parse-product-service',
          url,
          content: result.content,
          images: result.images,
          itemType,
          pageType
        },
        { timeout: 60000 }
      )

      if (!parseResponse.data.success) {
        throw new Error(parseResponse.data.error || 'Failed to parse content')
      }

      const parsedItems: ParsedItem[] = parseResponse.data.data

      if (!parsedItems || parsedItems.length === 0) {
        throw new Error('No items could be extracted from the page')
      }

      console.log(`‚úÖ Extracted ${parsedItems.length} item(s)`)

      // Add the URL as CTURL to all items (not generated by AI, just the provided URL)
      const itemsWithCturl = parsedItems.map(item => ({
        ...item,
        cturl: url
      }))

      // Navigate to form with pre-filled data
      // If collection, navigate to a list view first, otherwise directly to form
      if (pageType === 'collection' && itemsWithCturl.length > 1) {
        navigate(`/products/${slug}/${shortId}/new/manual`, {
          state: {
            aiGenerated: true,
            items: itemsWithCturl,
            isCollection: true
          }
        })
      } else {
        navigate(`/products/${slug}/${shortId}/new/manual`, {
          state: {
            aiGenerated: true,
            initialData: itemsWithCturl[0]
          }
        })
      }

    } catch (err: any) {
      console.error('Auto-fill error:', err)
      setError(err.response?.data?.message || err.message || 'Failed to process page')
      setLoading(false)
      setStep('type') // Go back to type selection
    }
  }

  const handleBack = () => {
    if (step === 'type') {
      setStep('url')
    } else if (step === 'url') {
      navigate(`/products/${slug}/${shortId}/new`)
    }
  }

  return (
    <div className="product-service-autofill">
      <div className="autofill-container">
        <button className="back-button" onClick={handleBack} disabled={loading}>
          <ArrowLeft size={20} />
          Back
        </button>

        <div className="autofill-header">
          <h1 className="autofill-title">AI Auto-Fill</h1>
          <p className="autofill-subtitle">
            {step === 'url' && 'Enter the URL of your product or service page'}
            {step === 'type' && 'Select the type and format'}
            {step === 'processing' && 'Processing your page...'}
          </p>
        </div>

        {error && (
          <div className="autofill-error">
            <p>{error}</p>
          </div>
        )}

        {step === 'url' && (
          <form onSubmit={handleUrlSubmit} className="autofill-form">
            <div className="form-group">
              <label className="form-label">
                <LinkIcon size={18} />
                Page URL
              </label>
              <input
                type="url"
                className="form-input"
                placeholder="https://example.com/products/my-product"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                autoFocus
              />
              <p className="form-hint">
                Provide a direct link to your product page, service page, or a page containing multiple items
              </p>
            </div>

            <button type="submit" className="button button-primary">
              Continue
            </button>
          </form>
        )}

        {step === 'type' && (
          <div className="type-selection">
            <div className="selection-group">
              <h3 className="selection-title">What type is this?</h3>
              <div className="selection-cards">
                <div
                  className={`selection-card ${itemType === 'product' ? 'active' : ''}`}
                  onClick={() => setItemType('product')}
                >
                  <Package size={24} />
                  <span>Product</span>
                  <p>Physical or digital goods</p>
                </div>
                <div
                  className={`selection-card ${itemType === 'service' ? 'active' : ''}`}
                  onClick={() => setItemType('service')}
                >
                  <Server size={24} />
                  <span>Service</span>
                  <p>Services or offerings</p>
                </div>
              </div>
            </div>

            <div className="selection-group">
              <h3 className="selection-title">What format is the page?</h3>
              <div className="selection-cards">
                <div
                  className={`selection-card ${pageType === 'single' ? 'active' : ''}`}
                  onClick={() => setPageType('single')}
                >
                  <FileText size={24} />
                  <span>Single Item</span>
                  <p>One product or service</p>
                </div>
                <div
                  className={`selection-card ${pageType === 'collection' ? 'active' : ''}`}
                  onClick={() => setPageType('collection')}
                >
                  <Layers size={24} />
                  <span>Collection</span>
                  <p>Multiple items on one page</p>
                </div>
              </div>
            </div>

            <button
              className="button button-primary"
              onClick={handleTypeSubmit}
              disabled={loading}
            >
              {loading ? 'Processing...' : 'Extract Information'}
            </button>
          </div>
        )}

        {step === 'processing' && (
          <div className="processing-state">
            <Loader className="processing-spinner" size={48} />
            <h3>Analyzing your page...</h3>
            <p>This may take a few moments</p>
            <div className="processing-steps">
              <div className="processing-step">‚úì Fetching page content</div>
              <div className="processing-step">‚úì Extracting images</div>
              <div className="processing-step active">‚è≥ Parsing with AI</div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default ProductServiceAutoFill
